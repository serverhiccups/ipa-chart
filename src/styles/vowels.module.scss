@use "sass:math";
@use "sass:list";

.vowels {
	display: inline-block;
}

@function quick-sort($list) {
	$less: ();
	$equal: ();
	$large: ();

	@if length($list) > 1 {
		$seed: nth($list, ceil(math.div(length($list), 2)));

		@each $item in $list {
			@if ($item == $seed) {
				$equal: append($equal, $item);
			} @else if ($item < $seed) {
				$less: append($less, $item);
			} @else if ($item > $seed) {
				$large: append($large, $item);
			}
		}

		@return join(join(quick-sort($less), $equal), quick-sort($large));
	}

	@return $list;
}

@function convertToGaps($lines) {
	$last: 0;
	$gaps: ();
	@each $line in $lines {
		$gaps: list.append($gaps, $line - $last);
		$last: $line;
	}
	@return $gaps();
}

@function centerPoints() {
	$svgWidth: 810;
	$svgHeight: 610;
	$svgHeightEm: 21rem;
	$scaleFactor: math.div($svgHeightEm, $svgWidth);
	$centersPixels: 5, 140, 205, 270, 337.5, 405, 470, 505, 540, 572.5, 605, 805;
	$centersEm: ();
	@each $center in $centersPixels {
		$centersEm: list.append($centersEm, $center * $scaleFactor);
	}
	@return $centersEm;
}

@function toHolders($centers) {
	$output: ();
	$offsets: (-3rem -0.5rem 0.5rem 3rem);
	@each $center in $centers {
		@each $offset in $offsets {
			$output: list.append($output, $center + $offset);
		}
	}
	@return $output;
}

@function rezeroList($list) {
	$first: list.nth($list, 1);
	@for $i from 1 to list.length($list) {
		$list: list.set-nth($list, $i, list.nth($list, $i) - $first);
	}
	@return $list;
}

@function composeFinalList() {
	@return convertToGaps(quick-sort(rezeroList(toHolders(centerPoints()))));
}

.grid {
	/*
        810px wide image.
        the first center line is at 5px
        5px, 140px, 270px, 405px, 470px, 540px, 605px, 805px
    */
	display: inline-grid;
	height: 21rem;
	grid-template-rows: [el-top row-start] 1rem [lines-top] 1rem [row-end] repeat(
			5,
			1fr [row-start] 2rem [row-end]
		) 1fr [row-start] 1rem [lines-bottom] 1rem [el-bottom row-end];
	grid-template-columns: [el-left] 1rem [lines-left] auto [lines-right] 1rem [el-right];
	padding-top: 3.25rem;
	& > .lines {
		grid-row: lines-top / lines-bottom;
		grid-column: lines-left / lines-right;
		height: 100%;
		width: calc(21rem + 2rem + 0.5rem + 2rem + 0.5rem);
	}
}
